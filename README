Sean Griffen (griffens)


This is my solution to homework 1.06, "Fog of War" and porting to C++.
All the structs that were defined in asssignment 1.05 have been converted to C++ classes, and all .c files have been renamed to .cpp
It generates a random number of dungeons that are persistent as the pc moves up and down staircases. 
Individual dungeons in the whole "game state" are the same as previous assignments, save the first and last dungeon. In the first dungeon generated, there are only down staircases, because there are no dungeons above this level. Similarly for the last dungeon, there are no up staircases because it is the lowest level for the game.
For a player to win, they must traverse to the last dungeon (lowest level) and defeat all the monsters in it (pretty easy with teleportation, lol)
The number of dungeons and npcs in those dungeons can be specified using the command arguments below,

Things to note:
	- A cell denoted as a Rock is printed as ' '
	- A cell denoted as a Room is printed as '.'
	- A cell denoted as a cooridor is printed as '#'
	- A cell denoted as a up staircase is printed as '<'
	- A cell denoted as a down staircase is printed as '>'
	- A cell containing the PC is printed as '@' with the color 'green' if the color option is selected
	- A cell containing an npc is printed as the type of that npc with the color 'red' if the color option is selected
	- Accessing 'warp' mode and the FOW toggle are mapped to the defiend controlls on the keyboard
	- The warp point when in that mode is denoted as a blue '*'
	- FOW does not save previously seen character positions (yet) 
	- The PC is controlled using the given previous assignement constraints
		- If, when moving diagonally, the pc can't move in both directions, it will move in the direction it can
	- Depending on the number of npcs defined, it can take a while for the next pc turn to take place
	- By far, the slowest part of each turn cycle is generating the shortest paths (non-tunneling and tunneling) to the pc after it moves. I'm not sure how best to make this faster using my priority queue implemtaiton in queue.c, queue.h, and path alrorithms in pathfinder.c, so any suggestions would be helpful.
		- So far, I've been relatively successful in using my own code without looking at the professors, so I'd like to solve this issue using what I have.
		- The port to C++ didn't really help the speed much, but I know there's some optimizations I can make with the class structures now, and I just haven't yet

NPC type descriptions:
	- Type 0:
		- npc is unintelligent, non-telepathic, non-tunneling, and predictable
			it randomly selectes a direction and moves in a straight line in that direction until it meets a cell that's immutable or a wall
			at which point it thinks hard for a turn and picks a random direction and continues in a straight line
	- Type 1:
		- npc is intelligent, non-telepathic, non-tunneling, and predictable
			it wanders like npc_0 until it sees the pc, then takes the shortest, non-tunneling path to it
			if it cannot see the pc, and it has seen the pc already, it takes the shortest path to the pc's last known location
			after it reaches said location without seeing the player, it goes back to wandering
			it also intentionally avoids cells other npcs occupy as to not kill them
	- Type 2:
		- npc is unintelligent, telepathic, non-tunneling, and predictable
			it moves towards the player, not necessarily taking the shortest path, excluding immutable and wall cells
	- Type 3:
		- npc is intelligent, telepathic, non-tunneling, and predictable
			it moves towards the player constantly, always taking the shortest non-tunneling path
			it also intentionally avoids cells other npcs occupy as to not kill them
	- Type 4:
		- npc is unintelligent, non-telepathic, tunneling, and predictable
			it moves like npc_0, but it can tunnel through walls
			if left alone long enough, this npc will eventually make every cell not immutable and not a room a cooridor
	- Type 5:
		- npc is intelligent, non-telepathic, tunneling, and predictable
			it wanders like npc_3 until it sees the pc, then takes the shortest path to it
			if it cannot see the pc, and it has already seen the pc, it takes the shortest path to the pc's last known location
			after it reaches said location without seeing the player, it goes back to wandering
			it also intentionally avoids cells other npcs occupy as to not kill them
	- Type 6:
		- npc is unintelligent, telepathic, tunneling, and predictable
			it moves towards the player, not necessarily taking the shortest path, excluding immutable cells
			it always tries to bring the delta y and delta x between it and the player to 0; if both already are 0, it acts like a CASE_0 npc
	- Type 7:
		- npc is intelligent, telepathic, tunneling, and predictable
			it moves towards the player constantly, always taking the shortest path
			it also intentionally avoids cells other npcs occupy as to not kill them
	- Type 8:
		- npc is intelligent, non-telepathic, non-tunneling, and eradic
			it has a 50% chance of being a type_0 npc, or randomly moving to a room/cooridor cell next to it
	- Type 9:
		- npc is unintelligent, telepathic, non-tunneling, and eradic
			it has a 50% chance of being a type_1 npc, or randomly moving to a room/cooridor cell next to it
	- Type A:
		- npc is unintelligent, telepathic, non-tunneling, and eradic
			it has a 50% chance of being a type_2 npc, or randomly moving to a room/cooridor cell next to it
	- Type B:
		- npc is intelligent, telepathic, non-tunneling, and eradic
			it has a 50% chance of being a type_3 npc, or randomly moving to a room/cooridor cell next to it
	- Type C:
		- npc is unintelligent, non-telepathic, tunneling, and eradic
			it has a 50% chance of being a type_4 npc, or randomly moving to any cell (besides immutable ones)
	- Type D:
		- npc is intelligent, non-telepathic, tunneling, and eradic
			it has a 50% chance of being a type_5 npc, or randomly moving to any cell (besides immutable ones)
	- Type E:
		- npc is unintelligent, telepathic, tunneling, and eradic
			it has a 50% change of being a type_6 npc, or randomly moving to any cell (besides immutable ones)
	- Type F:
		- npc is intelligent, telepathic, tunneling, and eradic
			it has a 50% chance of being a type_7 npc, or randomly moving to any cell (besides immutable ones)

To run the program, run the Makefile, and enter './rouge.o'. The valid command arguments are defined as follows:
	It is assummed that an argument is precedded with a "--" and arguments have no such prefix. 
	A '|' means that the flags/arguments that are involved are never entered at the same time. Pick 1 flag/argument to enter
	Ignore '<>' characters when entering arguments in the command window:
	- Print dungeon mod:
		- flag: print | p
		- arguments: <b | f>
		- description: 
			- arg = <b>: Prints a dungeon border
			- arg = <f>: Rocks are printed as unicode blocks, increasing shade of block as hardness increases. Rooms and cooridors are printed as empty spaces to contrast filled in rocks
		- notes: 
		- default behavior: Printing follows required specification
		- example command: --border f
	- Print color:
		- flag: color
		- arguments:
		- description: Prints the PC in green and NPCs in various colors based on type
		- notes: Only PC and NPCs are printed in color
		- default behavior: Nothing is printed with color
		- example command: --color
	- Number of npcs to generate per level
		- flag: nummon | nm
		- arguments: <uint>
		- description: 
			- Generates <uint> number of npcs in the dungeon
		- notes: 
			- <uint> should be non-negative. If <uint> is more than the max amount of playable cells in the dungeon, <uint> is truncated to the max number of playable cells
			- If nummon is defined, all generated "dungeons" during a single "game" have the same <uint> number of npcs
		- default behavior: A random number of npcs between <num_rooms> and <num_rooms * 2> are generated
		- example command: --nm 20
	- Number of dungeons to generate per game
		- flag: numdun | nd
		- arguments: <uint>
		- description:
			- Generates <uint> number of dungeons per game
		- notes: <uint> should be non-negative
		- default behavior: A random number of dungeons between 2 and 10 are generated
		- example command: --nd 12
	

A command to run this application with all arguments defined may look as follows:
	./rouge.o [<--print | --p> <b | f>] [--color] [<--nummmon | --nm> <uint>] [<--numdun | --nd> <uint>]