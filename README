Sean Griffen (griffens)


This is my solution to homework 1.02, Dungeon Generation.
It generates a "level" or "floor" that will eventually be one of many in a full Dungeon, complete with a random number of rooms with a random size (within the given constraints), cooridors connecting the rooms, and a small amount of up and down staircases.
Right now, the "randomness" of the level is seeded by time(), so the generated level is only going to be different every second.
Cooridors are drawn by finding the first room not in the connected set of rooms, and finding the closest room to it not in said set of connected rooms. The cooridor is then drawn to connect the two rooms, following the most direct path. Repeat this until all rooms are connected

Things to note:
	- A cell denoted as a Rock is printed as ' ' with the color 'green'
	- A cell denoted as a Room is printed as '.' with the color 'green'
	- A cell denoted as a cooridor is printed as '#' with the color 'green'
	- A cell denoted as a up staircase is printed as '<' with the color 'cyan'
	- A cell denoted as a down staircase is printed as '>' with the color 'cyan'
	- A cell containing a player is printed as '@' with the color 'green' if the color option is selected


To run the program, run the Makefile, and enter './rouge.o'. The valid command arguments are defined as follows:
	It is assummed that an argument is precedded with a "--" and arguments have no such prefix. 
	A '|' means that the flags/arguments that are involved are never entered at the same time. Pick 1 flag/argument to enter
	Ignore '<>' characters when entering arguments in the command window:
	- Print dungeon mod:
		- flag: print | p
		- default behavior: Printing follows required specification
		- arguments: <b | f>
		- description: 
			- arg = <b>: Prints a dungeon border
			- arg = <f>: Rocks are printed as unicode blocks, increasing shade of block as hardness increases. Rooms and cooridors are printed as empty spaces to contrast filled in rocks
		- notes: 
		- example command: --border f
	- Load dungeon from file:
		- flag: load | l
		- default behavior: No file is loaded, dungeon is generated from scratch
		- arguments: <filepath>
		- description: 
			- <filepath> is undefined - loads a dungeon from a bit-file with the full path of "~/.rlg327/dungeon"
			- <filepath> is defined  - loads a dungeon from a bit-file at location <filepath>
		- notes: Bit-file must be in the format given in the assignment 1.02 requirements
		- example command: --l tmp/bit-files/file.b
	- Save dungeon to file:
		- flag: save | s
		- default behavior: Dungeon is not saved to bit-file after generation
		- arguments: <filepath>
		- description: 
			- <filepath> is undefined - writes a generated dungeon to a bit-file
			- <filepath> is defined - writes a generated dungeon to a bit-file at location <filepath>
		- notes: Bit-file adhears to the assignment 1.02 requirements
		- example command: --s "/var/www/html/example.com/file.b"
	- Print color:
		- flag: color
		- default behavior: Nothing is printed with color
		- arguments:
		- description: Prints the PC in green and NPCs in various colors based on type
		- notes: Only PC and NPCs are printed in color
		- example command: --color
	

A command to run this application with all arguments defined may look as follows:
	./rouge.o [<--print | --p> <b | f>] [<--load | --l> <filepath>] [<--save | --s> <filepath>] [--color]