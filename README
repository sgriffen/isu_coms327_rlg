Sean Griffen (griffens)

This is my solution to homework 1.09, "PC Equipment and Updated Combat".

Things to note:
	- The PC gets 1 free move at the begenning
	- Equipped items and item inventory is persistent while traversing dungeon levels
	- To win, BOSS NPC must be defeated (if generated), otherwise all NPCs on the last level of the dungeon must be defeated
	- Warping on top of an NPC will immediatly kill that NPC
	- Pathfinding algorithm is a naive implementation of a priority queue (i.e. is not a binary heap), so it performs very slow due to re-sorting array after a priority of a node is changed (reason for delay between user input and pc and npcs moving). 
		Working on a fix to use a binary heap to implement the priority queue, but won't get done until next assignment, sorry :(

To run the program, run the Makefile, and enter './rlg'. The valid command arguments are defined as follows:
	It is assummed that an argument is precedded with a "--" and arguments have no such prefix. 
	A '|' means that the flags/arguments that are involved are never entered at the same time. Pick 1 flag/argument to enter
	Ignore '<>' characters when entering arguments in the command window:
	- Specify npc config file
		- flag: config-npc | c-npc
		- arguments: <filepath.txt>
		- description: Specify an ascii-encoded file to load the npc template configurations from
		- notes: 
			- If the file is in the same directory as main.cpp, then <filepath> can be relative to main.cpp
			- Otherwise, <filepath> must be the absolute path to the file.
			- File parsing is assumed to be a .txt file
		- default behavior: Item configuration is loaded from ~/.rlg327/monster_desc.txt
		- example command: --c-npc "configs/templates/npcs.txt"
	- Specify item config file
		- flag: config-item | c-item
		- arguments: <filepath.txt>
		- description: Specify an ascii-encoded file to load the item template configurations from
		- notes: 
			- If the file is in the same directory as main.cpp, then <filepath> can be relative to main.cpp
			- Otherwise, <filepath> must be the absolute path to the file.
			- File parsing is assumed to be a .txt file
		- default behavior: Item configuration is loaded from ~/.rlg327/object_desc.txt
		- example command: --c-item "configs/templates/items.txt"
	- Print dungeon mod:
		- flag: print | p
		- arguments: <f>
		- description: 
			- Rocks are printed as unicode blocks, increasing shade of block as hardness increases. Rooms and cooridors are printed as empty spaces to contrast filled in rocks
		- notes: 
		- default behavior: Printing follows required specification with border around playable area
		- example command: --border f
	- Number of npcs to generate per level
		- flag: nummon | nm
		- arguments: <uint>
		- description: 
			- Generates <uint> number of npcs in the current level of the dungeon
		- notes: 
			- <uint> should be non-negative. If <uint> is more than the max amount of playable cells in the dungeon, <uint> is truncated to the max number of playable cells
			- If nummon is defined, all generated "dungeons" during a single "game" have the same <uint> number of npcs
		- default behavior: A random number of npcs between <num_rooms> and <num_rooms * 2> are generated
		- example command: --nm 20
	- Number of items to generate per level
		- flag: numitem | nt
		- arguments: <uint>
		- description: 
			- Generates <uint> number of items in the current level of the dungeon
		- notes: 
			- <uint> should be non-negative. If <uint> is more than the max amount of playable cells in the dungeon, <uint> is truncated to the max number of playable cells
			- If numitem is defined, all generated "dungeons" during a single "game" have the same <uint> number of items
		- default behavior: A random number of items between 10 and 20 are generated
		- example command: --nt 5
	- Number of dungeons to generate per game
		- flag: numdun | nd
		- arguments: <uint>
		- description:
			- Generates <uint> number of dungeons per game
		- notes: <uint> should be non-negative
		- default behavior: A random number of dungeons between 2 and 10 are generated
		- example command: --nd 12

A command to run this application with all arguments defined may look as follows:
	./rlg [<--config-npc | --c-npc> <filepath>] [<--config-item | --c-item> <filepath>] [<--print | --p> <f>] [<--nummmon | --nm> <uint>] [<--numdun | --nd> <uint>] [<--numitem | --nt> <uint>]