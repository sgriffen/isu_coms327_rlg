03/04/2021
	- Turn in of final assignment 1.04 draft
	- Updating README with npc descriptions and new command args
	- Finilizing npc movement edge-cases

03/02/2021
	- Adding movement for all npcs

03/02/2021
	- Initial movement templates for pc and npcs
	- Modified current character.c and character.h files to adhear to new requirements

02/26/2021
	- Starting the process to use Dijkstra's Algorithm in cooridor generation, not using for now

02/25/2021
	- Turn in of final assignment 1.03 draft
	- Updated README with new command arg options
	- Adding 'binary_heap.c' and 'binary_heap.h' for possible new implementation of priority queue. They are unused for now, but may replace 'queue.c' and 'queue.h' in the future

02/24/2021:
	- Adding ability to define multiple print arguments on startup to print multiple versions of dungeons at once
	- Finalizing shortest path algorithm (implementation found in 'pathfinder.c' and 'pathfinder.h'. Priority queue implementation found in 'queue.c' and 'queue.h')
	- Replacing cell references in code (for rooms and PC for example) with a (y, x) coordinate reference
	- Replacing most of the 'malloc' calls with 'calloc'

02/23/2021:
	- Adding algorithm to find shortest path in 'pathfinder.c'. Currently not working, but code is there
	- Combining --load-from and --load run arguments into 1 argument and option pair. Doing same for --save-to and --save
	- Adding short-hand run argument versions for current long-form arguments (--l = --load, --s = --save, --p = --print)
	- Finilizing priority queue implementation and adding test executables to test certain utility functionality

02/22/2021:
	- Creation of queue.c and queue.h files to create a priority queue system for use in calculating the shortest path to the player

02/18/2021:
	- Turn in of final assignment 1.02 draft
	- Updated README from saying "homework 1.01 solution" to "homework 1.02 solution"
	- Adding file writing function to write from an array of buffers
	- Re-working file writing utility function to use a custom struct to pass pass in nmemb, read size, and a void* write buffer instead of passing all of these seperatly
	- Adding file reading function to read into an array of buffers
	- Re-working file reading utility function to use a custom struct to pass in nmemb, read size, and a void* read buffer instead of passing all of these seperatly
	- Fixing known read bug with staircases
	- Accounting for endinness

02/17/2021:
	- Known bug: When loading staircases, sometimes down staircases get lost, not sure why
	- Updating README with new run command flag descriptions
	- Adding [--color] flag to toggle printing PC and NPCs in color
	- Changing [--border] flag to [--print] flag with arguments <b | f> to wither print the dungeon with a border (as before) or print the dungeon with rocks filled in and rooms/cooridors as empty spaces

02/16/2021:
	- Finilizing reading and writing dungeon to bitfile (ignorning endianness for now, using machine default)
	- Adding color printing: green is the PC, cyan is a staircase. Will add more later
	- Adding character struct to base PC and NPC off of
	- Creating function to read dungeon from bitfile

02/15/2021:
	- Creating function to write dungeon to bitfile
	- Printing PC and NPCs in color
	- Cleaning up code from previous assignment
		- typedefing structs and enums
		- adding correct cell hardness functionality (rooms and cooridors are hardness 0, dungeon border is hardness 255)
		- renaming Level struct and files to Dungeon
	- Renaming 
	- Updating ituls functions from yesterday

02/14/2021:
	- Putting all files except rouge.c and rouge.h into src directory. Putting util files unto src/utils directory
	- Adding file utils to read, write, and get file sizes (found in file_utils.c)
	- Renaming utils.c to math_utils.c and math_utils.hardness

02/11/2021:
	- Turn in of final assignment 1.01 draft
	- Updated README to explain how cooridor drawing works
	- Changed cooridor drawing algorithm to draw to closest room not already in set of connected rooms, instead of drawing a direct path to the room next in the array of rooms, regardless of if it's already connected
	
02/10/2021:
	- Initial submission of assignment 1.01
	- Cooridors now have a 25% chance of deviating (up, down, left, or right) from the shortest path to the next room
	- Changing staircase placement so that the "first" room in the level always has an "up" staircase, and the "last" room in the level always has a "down" staircase. Other staircases are randomly placed in the other rooms (if applicable)
	- Adding a random chance function to utils.c that outputs true or false if the random number generated is less than the inputted number, achieving a "% chance" effect

02/09/2021:
	- Adding "--border" command argument to toggle printing a border around the generated level
	- Updated README with program description, and a description of what is outputted
	- Room generation finalized
	- Base corridor generation working

02/08/2021:
	- Added staircases to rooms
	- Worked on different stratigies for generating cooridors, need to complete

02/07/2021:
	- Created base structs for Levels, Rooms, and Cells
	- Got random room generation working

02/03/2021: 
	- Started CHANGELOG
	- Created Makefile and README